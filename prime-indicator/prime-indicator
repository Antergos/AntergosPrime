#!/usr/bin/env python3
# A mix between https://github.com/beidl/prime-indicator and https://github.com/linuxmint/nvidia-prime-applet

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Gdk
import sys, os
import gettext
import subprocess

# i18n
gettext.install("nvidia-prime-applet", "/usr/share/locale")

class Tray:
	def __init__(self):

		self.icon = Gtk.StatusIcon()
		self.icon.set_title("Prime Indicator")
		self.icon.connect("popup-menu", self.on_popup_menu)
		active_gpu = subprocess.getoutput('prime-select query')
		stat, out = subprocess.getstatusoutput('cat /proc/acpi/bbswitch')
		out = out.replace("0000:"+self.getCardId(), "")

		if "ON" in out:
			checkcardstate = True
		else:
			checkcardstate = False
		if (active_gpu == "nvidia"):
			self.icon.set_from_icon_name("prime-tray-nvidia")
			self.icon.set_tooltip_text(_("Active graphics card: NVIDIA"))
		elif (active_gpu == "intel"):
			if checkcardstate:
				self.icon.set_from_icon_name("prime-tray-intelred")
			else:
				self.icon.set_from_icon_name("prime-tray-intel")
			self.icon.set_tooltip_text(_("Active graphics card: INTEL"))
		else:
			self.icon.set_from_icon_name("dialog-error")
			self.icon.set_tooltip_text(_("Active graphics card: " + active_gpu))

	def on_popup_menu(self, icon, button, time, data = None):
		menu = Gtk.Menu()

		def position_menu_cb(m, x, y=None, i=None):
			try:
				return Gtk.StatusIcon.position_menu(menu, x, y, icon)
			except (AttributeError, TypeError):
				return Gtk.StatusIcon.position_menu(menu, icon)

		switch = Gtk.MenuItem(label=_("Switch"))
		switch.connect("activate", self.switch)
		menu.append(switch)
		menu.append(Gtk.SeparatorMenuItem())
		card = Gtk.MenuItem(label=_(self.cardState()))
		Gtk.MenuItem.set_sensitive(card,False)
		menu.append(card)
		menu.append(Gtk.SeparatorMenuItem())
		info = Gtk.MenuItem(label=_(self.rendererString()))
		Gtk.MenuItem.set_sensitive(info,False)
		menu.append(info)
		menu.append(Gtk.SeparatorMenuItem())
		settings = Gtk.MenuItem(label=_("NVIDIA Settings"))
		settings.connect("activate", self.run_nvidia_settings)
		isIntegrated = self.checkIntegrated()
		if isIntegrated:
			Gtk.MenuItem.set_sensitive(settings,False)
		menu.append(settings)
		menu.append(Gtk.SeparatorMenuItem())
		quitoption = Gtk.MenuItem(label=_("Quit"))
		quitoption.connect("activate", self.terminate)
		menu.append(quitoption)

		menu.show_all()

		device = Gdk.Display.get_default().get_device_manager().get_client_pointer()
		menu.popup_for_device(device, None, None, position_menu_cb, icon, button, time)

	def terminate(self, window = None, data = None):
		Gtk.main_quit()

	def switch(self, dude):
		response = self.showRebootDialog()
		isIntegrated = self.checkIntegrated()
		if response != Gtk.ResponseType.NO:
			if isIntegrated:
				self.switchToDiscrete()
			else:
				self.switchToIntegrated()
			self.logout()

	def showRebootDialog(self):
		isIntegrated = self.checkIntegrated()
		if isIntegrated:
			message = "Do you want to switch your graphics to NVIDIA?"
		else:
			message = "Do you want to switch your graphics to INTEL?"

		dialog = Gtk.MessageDialog(None, 0, Gtk.MessageType.QUESTION,
            Gtk.ButtonsType.YES_NO, message)
		dialog.format_secondary_text(
            "You will be logged out in the process.")
		response = dialog.run()
		dialog.destroy()
		return response

	def ignore(*args):
		return gtk.TRUE

	def run_nvidia_settings(self, dude):
		os.system("/usr/bin/nvidia-settings")

	def checkIntegrated(self):
		stat, out = subprocess.getstatusoutput("/usr/local/bin/prime-select query")
		if "intel" in out:
			return True
		else:
			return False

	def rendererString(self):
		stat, out = subprocess.getstatusoutput('glxinfo | grep "OpenGL renderer string"')
		out = out.replace("OpenGL renderer string", "OpenGL Renderer:")
		return out

	def cardState(self):
		id = self.getCardId()
		stat, out = subprocess.getstatusoutput('cat /proc/acpi/bbswitch')
		out = out.replace("0000:"+id, "Nvidia Card:")
		return out

	def getCardId(self):
		stat, out = subprocess.getstatusoutput('lspci | grep 3D | cut -d" " -f1')
		return out

	def switchToIntegrated(self):
		os.system("sudo /usr/local/lib/primeindicator/igpuon")

	def switchToDiscrete(self):
		os.system("sudo /usr/local/lib/primeindicator/dgpuon")

	def logout(self):
		os.system('cinnamon-session-quit --logout --no-prompt')

if __name__ == "__main__":

	Tray()
	Gtk.main()
