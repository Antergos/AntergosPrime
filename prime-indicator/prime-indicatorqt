#!/usr/bin/env python3
from PyQt4 import QtGui, QtCore
import sys, os
import gettext
import subprocess

class RightClickMenu(QtGui.QMenu):
	def __init__(self, parent=None):
		QtGui.QMenu.__init__(self, "File", parent)

		icon = QtGui.QIcon.fromTheme("exchange-positions")
		switchAction = QtGui.QAction(icon, "&Switch", self)
		switchAction.triggered.connect(switch)
		self.addAction(switchAction)

		icon = QtGui.QIcon.fromTheme("dialog-information")
		cardAction = QtGui.QAction(icon, str(cardState()), self)
		cardAction.setEnabled(False)
		self.addAction(cardAction)

		icon = QtGui.QIcon.fromTheme("dialog-information")
		renderAction = QtGui.QAction(icon, str(rendererString()), self)
		renderAction.setEnabled(False)
		self.addAction(renderAction)
        
		isIntegrated = checkIntegrated()
		if not isIntegrated:
			icon = QtGui.QIcon.fromTheme("nvidia-panel")
			exitAction = QtGui.QAction(icon, "&Nvidia Settings", self)
			exitAction.triggered.connect(run_nvidia_settings)
			self.addAction(exitAction)

		icon = QtGui.QIcon.fromTheme("application-exit")
		exitAction = QtGui.QAction(icon, "&Exit", self)
		exitAction.triggered.connect(askExit)
		self.addAction(exitAction)

class SystemTrayIcon(QtGui.QSystemTrayIcon):
	def __init__(self, parent=None):
		QtGui.QSystemTrayIcon.__init__(self, parent)
 
		isIntegrated = checkIntegrated()
		stat, checkcardstate = subprocess.getstatusoutput('cat /proc/acpi/bbswitch')
		checkcardstate = checkcardstate.replace("0000:04:00.0", "")
		if "ON" in checkcardstate:
			checkcardstate = True
		else:
			checkcardstate = False

		if isIntegrated:
			self.setIcon(QtGui.QIcon("/usr/local/lib/primeindicator/intel.svg"))
			if checkcardstate:
				self.setIcon(QtGui.QIcon("/usr/local/lib/primeindicator/intelred.svg"))
		else:
			self.setIcon(QtGui.QIcon("/usr/local/lib/primeindicator/nvidia.svg"))

		self.right_menu = RightClickMenu()
		self.setContextMenu(self.right_menu)

#		self.activated.connect(self.onTrayIconActivated)

#		self.eventObj=SystrayWheelEventObject()
#		self.installEventFilter(self.eventObj)

	def show(self):
		QtGui.QSystemTrayIcon.show(self)
        #QtCore.QTimer.singleShot(100, self.welcome)

  
def switch():
	response = showRebootDialog()
	isIntegrated = checkIntegrated()
	if response == QtGui.QMessageBox.Yes:
		if isIntegrated:
			switchToDiscrete()
		else:
			switchToIntegrated()
		logout()

def showRebootDialog():
	isIntegrated = checkIntegrated()
	if isIntegrated:
		message = "Do you want to switch your graphics to NVIDIA?"
	else:
		message = "Do you want to switch your graphics to INTEL?"
	dialog = QtGui.QMessageBox.question( None, 'Message',
            str(message), QtGui.QMessageBox.Yes | 
            QtGui.QMessageBox.No, QtGui.QMessageBox.No)
	return dialog

def askExit():
	dialog = QtGui.QMessageBox.question( None, 'Message',
            "Do you want to exit the application?", QtGui.QMessageBox.Yes | 
            QtGui.QMessageBox.No, QtGui.QMessageBox.No)
	if dialog == QtGui.QMessageBox.Yes:
		sys.exit()

def run_nvidia_settings():
	os.system("/usr/bin/nvidia-settings")

def checkIntegrated():
	stat, out = subprocess.getstatusoutput("/usr/local/bin/prime.sh query")
	if "intel" in out:
		return True
	else:
		return False

def rendererString():
	stat, out = subprocess.getstatusoutput('glxinfo | grep "OpenGL renderer string"')
	out = out.replace("OpenGL renderer string", "OpenGL Renderer:")
	return out

def cardState():
	stat, out = subprocess.getstatusoutput('cat /proc/acpi/bbswitch')
	out = out.replace("0000:04:00.0", "Nvidia Card:")
	return out

def switchToIntegrated():
	os.system("sudo /usr/local/lib/primeindicator/igpuon")

def switchToDiscrete():
	os.system("sudo /usr/local/lib/primeindicator/dgpuon")

def logout():
	os.system('qdbus org.kde.ksmserver /KSMServer logout 0 0 0')

if __name__ == "__main__":
	app = QtGui.QApplication([])

	tray = SystemTrayIcon()
	tray.show()

    #set the exec loop going
	while True :
		app.exec_()
